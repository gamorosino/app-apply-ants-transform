#!/bin/bash
#PBS -l nodes=1:ppn=1,vmem=8g,walltime=0:10:00
#PBS -N app-apply-transform
#PBS -V

# === Load fields from config.json ===
warp=$(jq -r .warp config.json)
inverse_warp=$(jq -r .inverse-warp config.json)
affine=$(jq -r .affine config.json)
input=$(jq -r .input config.json)
interpolation=$(jq -r .interpolation config.json)
inverse=$(jq -r .inverse config.json)
affine_only=$(jq -r .affine_only config.json)
fsl_transform=$(jq -r .fsl_transform config.json)

# Optional anatomical fields
t1w=$(jq -r .t1 config.json)
t2w=$(jq -r .t2 config.json)
parc=$(jq -r .parc config.json)
mask=$(jq -r .mask config.json)
dwi=$(jq -r .dwi config.json)

trks=./trks

# === Assign first available anatomical reference ===
if [ -n "$t1w" ] && [ "$t1w" != "null" ]; then
    anat=$t1w
elif [ -n "$t2w" ] && [ "$t2w" != "null" ]; then
    anat=$t2w
elif [ -n "$parc" ] && [ "$parc" != "null" ]; then
    anat=$parc
elif [ -n "$mask" ] && [ "$mask" != "null" ]; then
    anat=$mask
elif [ -n "$dwi" ] && [ "$dwi" != "null" ]; then
    anat=$dwi
else
    echo "Error: No valid anatomical reference found in config.json" >&2
    exit 1
fi

# Set default interpolation
[ "$interpolation" == "null" ] && interpolation="Linear"

# === Convert FSL transforms to ANTs if requested ===
if [[ "$fsl_transform" == "true" ]]; then
    echo "Converting FLIRT affine to ITK..."
    singularity exec -e docker://brainlife/connectome_workbench:1.5.0 wb_command -convert-affine -from-flirt $affine $input $anat -to-itk affine_ants_wb.txt
    affine="affine_ants_wb.txt"

    if [[ "$warp" != "null" && "$warp" != "" ]]; then
        echo "Converting FNIRT warpfield to ITK..."
        singularity exec -e docker://brainlife/connectome_workbench:1.5.0 wb_command -convert-warpfield -from-fnirt $warp $anat -to-itk warp_ants_wb.nii.gz
        warp="warp_ants_wb.nii.gz"
    fi
fi

# === Validate required transforms ===
if [[ "$affine_only" != "true" && "$warp" == "null" && "$inverse_warp" == "null" ]]; then
    echo "Error: No warp or inverse warp provided, and affine_only is false." >&2
    exit 1
fi

# === Build transformation chain based on logic ===
transforms=""
if [[ "$affine_only" == "true" ]]; then
    if [[ "$affine" != "null" && "$affine" != "" ]]; then
        transforms="-t $affine"
    else
        echo "Error: affine_only is true but affine transform not provided." >&2
        exit 1
    fi
else
    if [[ "$affine" != "null" && "$affine" != "" ]]; then
        if [[ "$inverse" == "true" ]]; then
            transforms="$transforms -t [$affine,1]"
        else
            transforms="$transforms -t [$affine,0]"
        fi
    fi
    if [[ "$inverse" == "true" ]]; then
        if [[ "$inverse_warp" != "null" && "$inverse_warp" != "" ]]; then
            transforms="$transforms -t $inverse_warp"
        else
            echo "Error: inverse is true but inverse-warp is missing in config.json." >&2
            exit 1
        fi
    else
        transforms="$transforms -t $warp"
    fi
fi

# === Create output directory ===
outdir=./ants_transformed
mkdir -p "$outdir"

# === Define output file name ===
output_image=${outdir}/t1.nii.gz

# === Run antsApplyTransforms ===
echo "Applying transforms to $input using reference $anat..."
singularity exec -e docker://brainlife/ants:2.2.0-1bc antsApplyTransforms \
    -d 3 \
    -i "$input" \
    -r "$anat" \
    $transforms \
    -o "$output_image" \
    -n "$interpolation"

echo "Transformation complete. Output written to $output_image"
